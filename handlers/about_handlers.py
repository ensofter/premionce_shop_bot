import logging

from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardButton

from keyboards.inline_kb import create_inline_kb
from keyboards.pagination_kb import create_pagination_keyboard
from lexicon.lexicon_about import LEXICON_OFFER, LEXICON_ABOUT
from lexicon.lexicon_common import LEXICON_COMMON
from lexicon.lexicon_faq import LEXICON_FAQ_QUESTIONS

router = Router()

logger = logging.getLogger(__name__)


# –•—ç–Ω–¥–ª–µ—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ FAQ
@router.callback_query(F.data.in_(['faq', 'back_to_faq']))
async def handle_button_faq_pressed(callback: CallbackQuery):
    user_id = callback.from_user.id
    questions = [i for i in LEXICON_FAQ_QUESTIONS.keys()]
    inline_kb = create_inline_kb(
        1,
        LEXICON_FAQ_QUESTIONS,
        *questions
    )
    inline_kb.row(InlineKeyboardButton(text=LEXICON_COMMON['back'], callback_data='back_to_about'))
    logger.info(f'–û—Ç–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} —Å–ø–∏—Å–æ–∫ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ FAQ')
    await callback.message.edit_text(
        text='üë®‚Äçüè´ –í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å',
        reply_markup=inline_kb.as_markup()
    )


# –•—ç–Ω–¥–ª–µ—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –≤–æ–ø—Ä–æ—Å–∞ –≤ —Å–ø–∏—Å–∫–µ –≤–æ–ø—Ä–æ—Å–æ–≤ FAQ
@router.callback_query(F.data.in_([i for i in LEXICON_FAQ_QUESTIONS.keys()]))
async def handle_button_question_pressed(callback: CallbackQuery):
    user_id = callback.from_user.id
    questions_keys = [i for i in LEXICON_FAQ_QUESTIONS.keys()]
    current_item = callback.data
    current_index = questions_keys.index(current_item)

    show_prev = current_index - 1 >= 0
    show_next = current_index + 1 <= len(questions_keys) - 1

    reply_kb = create_pagination_keyboard(
        f'backward:{current_item}' if show_prev else None,
        f'forward:{current_item}' if show_next else None
    )
    reply_kb.row(InlineKeyboardButton(text=LEXICON_COMMON['back'], callback_data='back_to_faq'))
    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –≤–æ–ø—Ä–æ—Å {LEXICON_FAQ_QUESTIONS[callback.data]} FAQ –¥–ª—è –ø—Ä–æ—á—Ç–µ–Ω–∏—è')
    await callback.message.edit_text(
        text=LEXICON_FAQ_QUESTIONS[callback.data],
        reply_markup=reply_kb.as_markup()
    )


# –•—ç–Ω–¥–ª–µ—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ù–ê–ó–ê–î –≤ —Å–ø–∏—Å–∫–µ –≤–æ–ø—Ä–æ—Å–æ–≤ FAQ
@router.callback_query(F.data.split(':')[0] == 'backward')
async def handle_button_backward_pressed(callback: CallbackQuery):
    user_id = callback.from_user.id
    questions_keys = [i for i in LEXICON_FAQ_QUESTIONS.keys()]
    current_item = callback.data.split(':')[1]
    current_index = questions_keys.index(current_item)

    prev_key = questions_keys[current_index - 1] if current_index > 0 else None
    if prev_key:
        show_prev = current_index - 1 > 0
        reply_kb = create_pagination_keyboard(
            f'backward:{prev_key}' if show_prev else None,
            f'forward:{prev_key}'
        )
        reply_kb.row(InlineKeyboardButton(text=LEXICON_COMMON['back'], callback_data='back_to_faq'))
        logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ FAQ')
        await callback.message.edit_text(
            text=LEXICON_FAQ_QUESTIONS[prev_key],
            reply_markup=reply_kb.as_markup()
        )
    await callback.answer()


# –•—ç–Ω–¥–ª–µ—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –í–ü–ï–†–ï–î –≤ —Å–ø–∏—Å–∫–µ –≤–æ–ø—Ä–æ—Å–æ–≤ FAQ
@router.callback_query(F.data.split(':')[0] == 'forward')
async def handle_button_forward_pressed(callback: CallbackQuery):
    user_id = callback.from_user.id
    questions_keys = [i for i in LEXICON_FAQ_QUESTIONS.keys()]
    current_item = callback.data.split(':')[1]
    current_index = questions_keys.index(current_item)

    next_key = questions_keys[current_index + 1] if current_index < len(questions_keys) - 1 else None

    if next_key:
        show_next = current_index + 1 < len(questions_keys) - 1
        reply_kb = create_pagination_keyboard(
            f'backward:{next_key}',
            f'forward:{next_key}' if show_next else None
        )
        reply_kb.row(InlineKeyboardButton(text=LEXICON_COMMON['back'], callback_data='back_to_faq'))
        logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ FAQ')
        await callback.message.edit_text(
            text=LEXICON_FAQ_QUESTIONS[next_key],
            reply_markup=reply_kb.as_markup()
        )
    await callback.answer()


# –•—ç–Ω–¥–ª–µ—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –û–§–ï–†–¢–´
@router.callback_query(F.data == 'offer')
async def handle_button_offer_pressed(callback: CallbackQuery):
    user_id = callback.from_user.id
    text = LEXICON_OFFER['offer']
    inline_kb = create_inline_kb(
        1,
        LEXICON_ABOUT,
        'back_to_about'
    )
    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è –û—Ñ–µ—Ä—Ç—ã')
    await callback.message.edit_text(
        text=text,
        reply_markup=inline_kb.as_markup()
    )
