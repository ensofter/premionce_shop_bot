import logging

from aiogram import Router, F
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.state import StatesGroup, State, default_state
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder

router = Router()

logger = logging.getLogger()


def debug_message(msg: Message):
    print(msg.model_dump_json(exclude_none=True, indent=2))


class FSMFillProfile(StatesGroup):
    fill_fio = State()
    fill_phone = State()
    fill_address = State()


@router.callback_query(F.data == 'cancel_fill_profile', StateFilter(default_state))
async def process_clbck_cancel_fill_profile_pressed(callback: CallbackQuery):
    await callback.message.edit_text(
        text='–í—ã –Ω–µ –∑–∞–ø–æ–ª–Ω—è–µ—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å. –í—ã –≤–Ω–µ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π'
    )


@router.callback_query(F.data == 'cancel_fill_profile', ~StateFilter(default_state))
async def process_clbck_cancel_fill_profile_pressed_in_state(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        text='–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è'
    )
    await state.clear()


@router.callback_query(F.data == 'fill_profile', StateFilter(default_state))
async def handle_clbck_button_fill_profile_pressed(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        text='üìö –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û\n\n'
             '<i>–≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤ –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å</i>'
    )
    await state.set_state(FSMFillProfile.fill_fio)


@router.message(StateFilter(FSMFillProfile.fill_fio),
                lambda x: len(x.text.strip().split()) == 3 and all(word.isalpha() for word in x.text.strip().split()))
async def handle_fio_sent(message: Message, state: FSMContext):
    await state.update_data(fio=message.text.strip())

    reply_phone_kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä üìû", request_contact=True)]
        ],
        resize_keyboard=True
    )
    await message.answer(
        text='–°–ø–∞—Å–∏–±–æ!\n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>7xxxxxxxxxx</b> '
             '–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –Ω–∞–∂–∞—Ç–∏–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ',
        reply_markup=reply_phone_kb
    )

    await state.set_state(FSMFillProfile.fill_phone)


@router.message(StateFilter(FSMFillProfile.fill_fio))
async def warning_not_fio(message: Message):
    await message.answer(
        text='‚ùå –¢–æ, —á—Ç–æ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –§–ò–û\n\n'
             '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û\n\n'
    )


@router.message(
    StateFilter(FSMFillProfile.fill_phone),
    F.text | F.contact,
    lambda x: (
        (x.text and x.text.isdigit() and len(x.text) == 11 and x.text.startswith('7'))
        or
        (x.contact and x.contact.phone_number)
    )
)
async def handle_phone_sent(message: Message, state: FSMContext):
    logger.info(f'!!! {debug_message(message)}')
    phone = message.text if message.text else message.contact.phone_number
    await state.update_data(phone=phone)


@router.message(StateFilter(FSMFillProfile.fill_phone))
async def warning_not_phone(message: Message):
    await message.answer(
        text='‚ùå –¢–æ, —á—Ç–æ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n\n'
             '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ\n\n'
             '<b>7xxxxxxxxxx</b>\n\n'
             '–Ω–∞—á–∏–Ω–∞–µ—Ç —Å 7 –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç 11 —Ü–∏—Ñ—Ä'
    )








