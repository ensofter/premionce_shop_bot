import logging

from aiogram import Router, F
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton

from database.database import user_db
from handlers.profile_handlers import FSMProfileEdit
from keyboards.cart_kb import create_cart_kb
from keyboards.inline_kb import create_inline_kb
from lexicon.lexicon_cart import LEXICON_CART
from lexicon.lexicon_common import LEXICON_COMMON
from lexicon.lexicon_profile import LEXICON_PROFILE
from lexicon.lexicon_promotions import LEXICON_PROMOTIONS
from lexicon.lexicon_referral import LEXICON_REFERRAL
from lexicon.lexicon_main_menu import LEXICON_MM
from lexicon.lexicon_about import LEXICON_ABOUT
from lexicon.lexicon_catalog import LEXICON_CATALOG_CATEGORIES, LEXICON_CATALOG

logger = logging.getLogger()

router = Router()


async def handle_empty_cart(message_or_callback: Message | CallbackQuery):
    """
    –î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω—É–∂–Ω–∞, –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –∏–∑–±–∞–≤–∏—Ç—å—Å—è –æ—Ç –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–≥–æ—Å—è –∫–æ–¥–∞
    :param message_or_callback:
    :return:
    """
    inline_kb = create_inline_kb(
        1,
        LEXICON_CART,
        'back_to_catalog'
    )
    text = LEXICON_CART['cart_is_empty']
    if isinstance(message_or_callback, CallbackQuery):
        await message_or_callback.message.edit_text(
            text=text,
            reply_markup=inline_kb.as_markup()
        )
    else:
        await message_or_callback.answer(
            text=text,
            reply_markup=inline_kb.as_markup()
        )


# –•—ç–Ω–¥–ª–µ—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π —Ä–µ–ø–ª–∞–π —Å–æ–æ–±—â–µ–Ω–∏–µ catalog –∏–ª–∏ inline –∫–Ω–æ–ø–∫—É –ù–ê–ó–ê–î back_to_catalog
@router.message(F.text == LEXICON_MM['catalog'])
@router.callback_query(F.data == 'back_to_catalog')
async def handle_catalog(message_or_callback: Message | CallbackQuery):
    user_id = message_or_callback.from_user.id
    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤')
    inline_kb = create_inline_kb(
        1,
        LEXICON_CATALOG_CATEGORIES,
        *LEXICON_CATALOG_CATEGORIES.keys()
    )
    if isinstance(message_or_callback, CallbackQuery):
        await message_or_callback.message.edit_text(
            text=LEXICON_CATALOG['welcome_text'],
            reply_markup=inline_kb.as_markup()
        )
    else:
        await message_or_callback.answer(
            text=LEXICON_CATALOG['welcome_text'],
            reply_markup=inline_kb.as_markup()
        )


@router.message(F.text == LEXICON_MM['promotions'])
@router.callback_query(F.data == 'back_to_promotions')
async def handle_promotions(message_or_callback: Message | CallbackQuery):
    user_id = message_or_callback.from_user.id
    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –¥–µ–π—Å—Ç–≤—É—é—â–∏–µ –∞–∫—Ü–∏–∏')
    if isinstance(message_or_callback, CallbackQuery):
        await message_or_callback.message.edit_text(
            text=LEXICON_PROMOTIONS['welcome_promotion_text']
        )
    else:
        await message_or_callback.answer(
            text=LEXICON_PROMOTIONS['welcome_promotion_text']
        )


# –•—ç–Ω–¥–ª–µ—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π —Ä–µ–ø–ª–∞–π —Å–æ–æ–±—â–µ–Ω–∏–µ cart –∏–ª–∏ inline –∫–Ω–æ–ø–∫—É –ù–ê–ó–ê–î back_to_cart
@router.message(F.text == LEXICON_MM['cart'])
@router.callback_query(F.data == 'back_to_cart')
async def handle_cart(message_or_callback: Message | CallbackQuery):
    user_id = message_or_callback.from_user.id
    if user_id in user_db:
        if not user_db[user_id].cart.total_uniq_items():
            await handle_empty_cart(message_or_callback)
        else:
            items_text = [
                f"{i}. {item.name} <code>{item.quantity}—à—Ç. √ó {item.unit_price}‚ÇΩ = {item.quantity * item.unit_price}‚ÇΩ</code>"
                for i, item in enumerate(user_db[user_id].cart.items.values(), start=1)
            ]
            text = (
                    f"üëæ –í –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω–µ {len(items_text)} —Ç–æ–≤–∞—Ä–æ–≤\n\n"
                    + "\n".join(items_text)
                    + f"\n\n{len(items_text)+1}. –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ—á—Ç–æ–π –†–æ—Å—Å–∏–∏ –ø–µ—Ä–≤—ã–π –∫–ª–∞—Å—Å <code>800‚ÇΩ</code>"
                    + f"\n\n<b>–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</b> <code>{sum(i.unit_price * i.quantity for i in user_db[user_id].cart.items.values()) + 800}‚ÇΩ</code>"
            )
            inline_kb = create_cart_kb(user_db[user_id].cart.items)
            if isinstance(message_or_callback, CallbackQuery):
                await message_or_callback.message.delete()
                await message_or_callback.message.answer(
                    text=text,
                    reply_markup=inline_kb
                )
            else:
                await message_or_callback.answer(
                    text=text,
                    reply_markup=inline_kb
                )
    else:
        await handle_empty_cart(message_or_callback)


# –•—ç–Ω–¥–ª–µ—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π —Ä–µ–ø–ª–∞–π —Å–æ–æ–±—â–µ–Ω–∏–µ orders –∏–ª–∏ inline –∫–Ω–æ–ø–∫—É –ù–ê–ó–ê–î back_to_orders
@router.message(F.text == LEXICON_MM['orders'])
@router.callback_query(F.data == 'back_to_orders')
async def handle_orders(message_or_callback: Message | CallbackQuery):
    user_id = message_or_callback.from_user.id
    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞—à–µ–ª –≤ –º–µ–Ω—é –ó–∞–∫–∞–∑—ã')
    if user_id in user_db:
        if isinstance(message_or_callback, CallbackQuery):
            await message_or_callback.message.edit_text(
                text='–¢—É—Ç –±—É–¥—É –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
            )
        else:
            await message_or_callback.answer(
                text='–¢—É—Ç –±—É–¥—É –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
            )
    else:
        if isinstance(message_or_callback, CallbackQuery):
            await message_or_callback.message.edit_text(
                text='–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞'
            )
        else:
            await message_or_callback.answer(
                text='–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞'
            )


# –•—ç–Ω–¥–ª–µ—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å, –Ω–æ –≤–¥—Ä—É–≥ –ø–µ—Ä–µ–¥—É–º–∞–ª –∏ –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –ù–ê–ó–ê–î
@router.callback_query(F.data == 'back_to_profile', StateFilter(FSMProfileEdit.waiting_edit_choice))
async def cancel_editing_profile(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ–Ω–∏–ª —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∏ –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –ù–ê–ó–ê–î')
    await state.clear()
    await handle_profile(callback)


# –•—ç–Ω–¥–ª–µ—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π —Ä–µ–ø–ª–∞–π —Å–æ–æ–±—â–µ–Ω–∏–µ profile –∏–ª–∏ inline –∫–Ω–æ–ø–∫—É –ù–ê–ó–ê–î back_to_profile
@router.message(F.text == LEXICON_MM['profile'])
@router.callback_query(F.data == 'back_to_profile')
async def handle_profile(message_or_callback: Message | CallbackQuery):
    """
    –ö—Ä–∏–≤–æ–π —Ö—ç–Ω–¥–ª–µ—Ä. –í –Ω–∞—á–∞–ª–µ —Å—Ç–æ–∏—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, —á—Ç–æ –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–∞–∫ –≤ –±–∞–∑–∫–µ –∏–ª–∏ –Ω–µ—Ç. –ù–∞–¥–æ –ø–æ—Ç–æ–º –±—É–¥–µ—Ç —É–±—Ä–∞—Ç—å!
    :param message_or_callback:
    :return:
    """
    user_id = message_or_callback.from_user.id
    if user_id in user_db:
        if user_db[user_id].profile.is_complete():
            logger.info(f'–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø–æ–ª–Ω–µ–Ω –ø—Ä–æ—Ñ–∏–ª—å')
            inline_kb = create_inline_kb(
                1,
                LEXICON_PROFILE,
                'edit_profile',
                'for_what',
            )
            text = LEXICON_PROFILE['exist'](
                fullname=user_db[user_id].profile.fullname,
                phone=user_db[user_id].profile.phone,
                address=user_db[user_id].profile.address
            )
            if isinstance(message_or_callback, CallbackQuery):
                await message_or_callback.message.edit_text(
                    text=text,
                    reply_markup=inline_kb.as_markup()
                )
            else:
                await message_or_callback.answer(
                    text=text,
                    reply_markup=inline_kb.as_markup()
                )
        else:
            logger.info(f'–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ù–ï –∑–∞–ø–æ–ª–Ω–µ–Ω –ø—Ä–æ—Ñ–∏–ª—å')
            inline_kb = create_inline_kb(
                1,
                LEXICON_PROFILE,
                'fill_profile',
                'for_what'
            )
            text = LEXICON_PROFILE['does_not_exist']
            if isinstance(message_or_callback, CallbackQuery):
                await message_or_callback.message.edit_text(
                    text=text,
                    reply_markup=inline_kb.as_markup()
                )
            else:
                await message_or_callback.answer(
                    text=text,
                    reply_markup=inline_kb.as_markup()
                )
    else:
        logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –ë–î')
        text = LEXICON_COMMON['user_not_exist']
        if isinstance(message_or_callback, CallbackQuery):
            await message_or_callback.message.edit_text(
                text=text
            )
        else:
            await message_or_callback.answer(
                text=text
            )



# –•–µ–Ω–¥–ª–µ—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–ø–ª–∞–π —Å–æ–æ–±—â–µ–Ω–∏–µ referral –∏–ª–∏ inline –∫–Ω–æ–ø–∫—É –ù–ê–ó–ê–î back_to_referral
@router.message(F.text == LEXICON_MM['referral'])
@router.callback_query(F.data == 'back_to_referral')
async def handle_referral(message_or_callback: Message | CallbackQuery):
    """
    –î–æ–≤–æ–ª—å–Ω–æ –∫—Ä–∏–≤–æ–π —Ö–µ–Ω–¥–ª–µ—Ä, —Ç–∞–∫ –∫–∞–∫ —É –º–µ–Ω—è –µ—Å—Ç—å –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–∞–∫ –≤ –±–∞–∑–µ –∏–ª–∏
    –Ω–µ—Ç, —Ç—É—Ç –ª–∏—à–Ω—è, –ø–æ—Ç–æ–º—É —á—Ç–æ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –∫–æ–Ω–µ—á–Ω–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –±—É–¥–µ—Ç –Ω–∏–∫–∞–∫–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤. –ù–æ –ø–æ–∑–∂–µ –º–æ–∂–µ—Ç –∏ –±—É–¥—É—Ç.
    :param message_or_callback:
    :return:
    """
    user_id = message_or_callback.from_user.id
    inline_kb = create_inline_kb(
        1,
        LEXICON_REFERRAL,
        'referral_url',
        'referral_what_is_it'
    )
    if user_id in user_db:
        logger.info(f'–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—ã')
        text = LEXICON_REFERRAL['user_has_referral'](
            referral_count=user_db[user_id].referral.referral_count,
            referral_income=user_db[user_id].referral.referral_income,
            balance=user_db[user_id].referral.balance
        )
    else:
        logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ')
        text = LEXICON_REFERRAL['user_hasnt_referral']
    if isinstance(message_or_callback, Message):
        await message_or_callback.answer(
            text=text,
            reply_markup=inline_kb.as_markup()
        )
    else:
        await message_or_callback.message.edit_text(
            text=text,
            reply_markup=inline_kb.as_markup()
        )


# –•–µ–Ω–¥–ª–µ—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–ø–ª–∞–π –∫–æ–º–∞–Ω–¥—É about –∏ –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫ –ù–ó–ê–î back_to_about
@router.message(F.text == LEXICON_MM['about'])
@router.callback_query(F.data == 'back_to_about')
async def handle_about(message_or_callback: Message | CallbackQuery):
    user_id = message_or_callback.from_user.id
    inline_kb = create_inline_kb(
        1,
        LEXICON_ABOUT,
        'faq',
        'offer'
    )
    inline_kb.row(
        InlineKeyboardButton(text='‚Äçüíª –ú–µ–Ω–µ–¥–∂–µ—Ä', url="tg://user?id=82429730"),
        InlineKeyboardButton(text=LEXICON_COMMON['back_to_main_menu'], callback_data='back_to_main_menu'),
        width=1
    )
    text = LEXICON_ABOUT['üç• –û –Ω–∞—Å']
    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ó–∞–ø—Ä–æ—Å–∏–ª –ø—É–Ω–∫—Ç –º–µ–Ω—é –û –Ω–∞—Å')
    if isinstance(message_or_callback, CallbackQuery):
        await message_or_callback.message.edit_text(
            text=text,
            reply_markup=inline_kb.as_markup()
        )
    else:
        await message_or_callback.answer(
            text=text,
            reply_markup=inline_kb.as_markup()
        )
