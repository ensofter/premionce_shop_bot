from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton

from database.database import user_db
from keyboards.inline_kb import create_inline_kb
from lexicon.lexicon_inline_kb import LEXICON_INLINE_KB
from lexicon.lexicon_main_menu import LEXICON_MM

router = Router()


@router.message(F.text == 'ü©∑ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞')
@router.callback_query(F.data == 'back_to_referral')
async def handle_referral(message_or_callback: Message | CallbackQuery):
    user_id = message_or_callback.from_user.id

    reply_kb = create_inline_kb(
        1,
        LEXICON_INLINE_KB,
        'referral_url',
        'referral_what_is_it'
    )

    text = 'ü´Ç –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞\n\n' \
           f'–í–∞—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {user_db[user_id]["referral"]["total_referral"]}\n' \
           f'–û–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫: {user_db[user_id]["referral"]["total_income"]} ‚ÇΩ\n' \
           f'–¢–µ–∫—É—â–∏–π –≤–∞—à –±–∞–ª–∞–Ω—Å: {user_db[user_id]["referral"]["balance"]} ‚ÇΩ\n\n' \
           '–†–µ–∫–ª–∞–º–∏—Ä—É–π PREMIONCE shop —Å—Ä–µ–¥–∏ —Å–≤–æ–∏—Ö –∑–Ω–∞–∫–æ–º—ã—Ö –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π ‚ÇΩ —Å –∏—Ö –ø–æ–∫—É–ø–æ–∫.'

    if isinstance(message_or_callback, Message):
        await message_or_callback.answer(
            text=text,
            reply_markup=reply_kb.as_markup()
        )
    else:
        await message_or_callback.message.edit_text(
            text=text,
            reply_markup=reply_kb.as_markup()
        )


@router.message(F.text == 'üç• –û –Ω–∞—Å')
@router.callback_query(F.data == 'back_to_about')
async def handle_about(message_or_callback: Message | CallbackQuery):
    reply_kb = create_inline_kb(
        1,
        LEXICON_INLINE_KB,
        'faq',
    )
    reply_kb.row(InlineKeyboardButton(text='‚Äçüíª –ú–µ–Ω–µ–¥–∂–µ—Ä', url="tg://user?id=82429730"))

    text = LEXICON_MM['üç• –û –Ω–∞—Å']

    if isinstance(message_or_callback, CallbackQuery):
        await message_or_callback.message.edit_text(text=text, reply_markup=reply_kb.as_markup())
    else:
        await message_or_callback.answer(text=text, reply_markup=reply_kb.as_markup())
